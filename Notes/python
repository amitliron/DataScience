General
-------------------------------------------------
x[0:2]=='RT'

a = iter(list)
next(a)
next(a)


enumerate	  - add index and convert into tuple (i.e enumerate(list)
		  - list = [1,2,3,4]
		    e = enumarate(list,2)
		    list2 = list(e)

zip(list1, list2) - combine the elements from list1 and list2 ((a1,b1),(a2,b2),...)

z1 = zip(mutants,powers)


Dictionaries:
-------------------------------------------------
1.	dic = {0:"hello", True:"dear", "two":"222"}
2.	"two" in dic
3.	del(dic[True])
4.	europe.keys()



List
-------------------------------------------------
1. 	list.index("england")
2.	list > 23 		=>	return array with result "true" or "false"
3.	nums = [1,2,3,4,5]
	new_nums = [num + 1 for num in nums]

4.	p2 = [(n1,n2) for n1 in range(1,6) for n2 in range (3,5)]
5.	matrix = [[col for col in range(0,5)] for row in range(0,5)]
6.	[num**2 for num in range(10) if num%2==0]
7.	{x: -x for num in range(9)}
8.	new_fellowship = [member if len(member)>=7 else '' for member in fellowship]


numpy
-------------------------------------------------
np.logical_or(bmi>21, bmi<22)	=>	return array with result "true" or "false"




tuples
-------------------------------------------------
t = (1,2,3)
a,b,c = t
t[1]	


functions
-------------------------------------------------
t = (a,b)
return t

1. global var (use the global varable insead of function / instead of creatting new one)
2. nonlocal -> dont creat a new varable, use the exsisting one


flexiable arguments:

def add(*args):
	for num in args
		sum+=num


def add(**args):
	for key, val in args.items()
		sum+=num

add(name='amit',last='liron')


func(a,b='b',c='cc')

func(5,c='ddd')



lamda
-------------------------------------------------
r = lambda x,y: x**y
r(2,3)


map
-------------------------------------------------
map - return a map object
a = [1,2,3,4,5]
b = map(lambda num: num**2, a)

fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']
result = filter(lambda val:len(val)>6, fellowship)
result_list = list(result)



exceptions
-------------------------------------------------
try:
except:
	print('')
except TypeError:
	print('')
	raise ValueError('')



generators
-------------------------------------------------
1. save memory (use it instead of [])

result = (num for num in range(10))
print(next(result))
for x in result:
	print(x)


2. generator functions:

	def f():
		x = 0
		yeild x
		x +=1


3. tweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']

