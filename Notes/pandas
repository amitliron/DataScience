type(apple)		 		->	 dataFrame
apple.shape				->	 (100, 6)
apple.colums				->	 [('a','b', 'name'), dtype='object']
cars.index = row_labels			->	 add index names instead of numbers 
brics[['a']] or brics[['a','b']]	-> 	 return the column as dataFrame
brics[1:4]				-> 	 return rows 1 to 4


iloc
---------------------------------------
iloc -> return by index
brics.loc[["ru"]]				-> "ru" is the row
brics.loc[["ru", "a"], ["col1", "col2"]]	-> get dataFrame with specific rows and cols


1. slice
---------
apple.iloc[:5,:]	or	apple.iloc[-5:,:]


2. functions:
--------------
apple.head(5) or	apple.head()
apple.tail(3) or	apple.tail()
apple.info()		- we can get the types, num of records, and num of nulls
apple.values		- return array of numpy

col = apple['field_name'] where col is serias (and apple is dataframe)

3. change columns names and indexes names (from 0 to... to other):
-------------------------------------------------
data.columns = ['col1', 'col2', 'col3']
data.index   = ['A', 'B', 'C', 'D']


4. general
--------------
list(zip(list_keys, list_values))	
data = dict(zipped)
df = pd.DataFrame(data)	


5. import
------------------
a = pd.read_csv(file_name)
a = pd.read_csv(file_name,index_col=0)			    - index_col ignore first column (0,1,2,...) which added defalt by pandas
a = pd.read_csv(file_name,header=None)	 		    - don't assume first line is the header 
a = pd.read_csv(file_name,header=None,names=col_list_names) - set columns names
a = pd.read_csv(file_name,na_values='-1')		    - mark '-1' as NAN values
a = pd.read_csv(file_name,parse_dates)			    -
a.iloc[10:20, :]					    - save only slice from the input (from rows 10-20)

for chunk in pd.read_csv(file, chunksize=1000):
	r.append(chunk['x'])


6. export
------------------
a.to_csv(file_name)
a.to_csv(file_name, sep='\t')
a.to_excel(file_name)


Notes:
------------------------
1. see pandas with dates (when read csv)
2. see pandas and plot (when plot directly from dataframe)


Comapre:
------------------------
1.	
	is_huge = bric["area"]>8
	bric[is_huge]

	or

	bric[bric["area"] > 8]


2.	
	brics[np.logical_and(brics["a"]>8,brics["a"] <10)]


3.     a = a[a['field']] 	-> a will be dataframe (matrix with only rows with are true from field 'a'




SAS 	- statical analysis system
Stata	- statisics and data



	

