- join and inner join are the same


SELECT city.name, country.name, country.region
FROM cities AS city
  INNER JOIN countries AS country
    ON city.country_code = country.code;


SELECT cities.name AS city, countries.name AS country, countries.region
FROM cities 
  INNER JOIN countries 
    ON cities.country_code = countries.code;


triple example
-------------------------------

SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
  FROM countries AS c  
  INNER JOIN populations AS p
  ON c.code = p.country_code
  INNER JOIN economies AS e
  ON c.code = e.code AND e.year = p.year;



select new field caluclation
------------------------------

SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc

FROM populations AS p1
INNER JOIN populations AS p2
ON p1.country_code = p2.country_code
AND p1.year = p2.year - 5;


case
--------------------------------

SELECT name, continent, code, surface_area,
	CASE WHEN surface_area > 2000000 THEN 'large'
	WHEN  surface_area > 350000 THEN 'medium'
	ELSE 'small' END
	AS geosize_group
FROM countries;


INTO
---------------------------------

SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
INTO pop_plus

FROM populations
WHERE year = 2015;

SELECT *
FROM pop_plus


ALL TOGETHER:
------------------------------

SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;


SELECT name, continent,geosize_group, popsize_group
FROM countries_plus AS c
	INNER JOIN pop_plus AS P
	ON c.code = p.country_code
ORDER BY geosize_group;



LEFT &  RIGHT Joins
--------------------------------
LEFT: all rows from left with right. if right does not match to leaft, it will remain null


SELECT c1.name AS city, 
       code, 
       c2.name AS country,
       region, 
       city_proper_pop
FROM cities AS c1  
LEFT JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;


